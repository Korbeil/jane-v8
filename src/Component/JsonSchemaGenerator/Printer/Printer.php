<?php

namespace Jane\Component\JsonSchemaGenerator\Printer;

use Jane\Component\JsonSchemaGenerator\Configuration;
use PhpCsFixer\Console\Application;
use PhpCsFixer\Console\Command\FixCommand;
use PhpCsFixer\ToolInfo;
use PhpParser\PrettyPrinter\Standard;
use PhpParser\PrettyPrinterAbstract;
use Symfony\Component\Console\Input\ArrayInput;
use Symfony\Component\Console\Output\NullOutput;
use Symfony\Component\Filesystem\Filesystem;

class Printer
{
    private readonly PrettyPrinterAbstract $printer;

    public function __construct(
        private readonly Configuration $configuration,
    ) {
        $this->printer = new Standard();
    }

    public function output(Registry $registry): void
    {
        if ($this->configuration->cleanGenerated) {
            $fs = new Filesystem();
            $fs->remove($this->configuration->outputDirectory);
        }

        foreach ($registry->getFiles() as $file) {
            if (!file_exists(\dirname($file->filename))) {
                mkdir(\dirname($file->filename), 0755, true);
            }

            file_put_contents($file->filename, $this->printer->prettyPrintFile([$file->node]));
        }

        if ($this->configuration->useFixer) {
            $this->fix($this->configuration->outputDirectory);
        }
    }

    protected function getDefaultRules(): string
    {
        $rules = [
            '@Symfony' => true,
            'self_accessor' => true,
            'array_syntax' => ['syntax' => 'short'],
            'concat_space' => ['spacing' => 'one'],
            'declare_strict_types' => true,
            'header_comment' => [
                'header' => <<<EOH
This file has been auto generated by Jane,

Do not edit it directly.
EOH
                ,
            ],
        ];

        /* @phpstan-ignore-next-line */
        if (version_compare(Application::VERSION, '3.0.0', '>=')) {
            $rules['yoda_style'] = false;
        } elseif (version_compare(Application::VERSION, '2.6.0', '>=')) {
            $rules['yoda_style'] = null;
        }

        /** @var string $encodedRules */
        $encodedRules = json_encode($rules);

        return $encodedRules;
    }

    protected function fix(string $path): void
    {
        if (!class_exists(FixCommand::class)) {
            return;
        }

        $command = new FixCommand(new ToolInfo());
        $config = [
            'path' => [$path],
        ];

        if (null !== $this->configuration->fixerConfig) {
            $config['--config'] = $this->configuration->fixerConfig;
        } else {
            $config['--allow-risky'] = 'yes';
            $config['--rules'] = $this->getDefaultRules();
        }

        $command->run(new ArrayInput($config, $command->getDefinition()), new NullOutput());
    }
}
