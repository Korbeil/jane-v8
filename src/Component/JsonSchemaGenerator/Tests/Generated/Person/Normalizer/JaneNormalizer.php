<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do not edit it directly.
 */

namespace Jane\Component\JsonSchemaGenerator\Tests\Generated\Person\Normalizer;

use AutoMapper\AutoMapperInterface;
use Jane\Component\JsonSchemaGenerator\Tests\Generated\Person\Model\Person;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class JaneNormalizer implements NormalizerInterface, DenormalizerInterface
{
    public const MODELS = [Person::class => false];
    public const NORMALIZERS = [Person::class => PersonNormalizer::class];
    private readonly ?AutoMapperInterface $autoMapper;
    /** @var (NormalizerInterface&DenormalizerInterface)[] */
    public array $normalizersCache = [];

    public function __construct(AutoMapperInterface $autoMapper = null)
    {
        $this->autoMapper = $autoMapper;
    }

    /**
     * @param object $object
     *
     * @return array
     */
    public function normalize(mixed $object, string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        return $this->getNormalizer($object::class)->normalize($object, $format, $context);
    }

    /**
     * @param object $data
     */
    public function supportsNormalization(mixed $data, string $format = null, array $context = []): bool
    {
        return \in_array($data::class, array_keys(static::MODELS), true);
    }

    /**
     * @param array|object $data
     *
     * @return object
     */
    public function denormalize(mixed $data, string $type, string $format = null, array $context = []): mixed
    {
        return $this->getNormalizer($type)->denormalize($data, $type, $format, $context);
    }

    public function supportsDenormalization(mixed $data, string $type, string $format = null, array $context = []): bool
    {
        return \in_array($type, array_keys(static::MODELS), true);
    }

    /** @return array<class-string, bool> */
    public function getSupportedTypes(?string $format): array
    {
        return static::MODELS;
    }

    public function getNormalizer(string $normalizer): NormalizerInterface&DenormalizerInterface
    {
        if (!\array_key_exists($normalizer, $this->normalizersCache)) {
            $normalizerClass = static::NORMALIZERS[$normalizer];
            /** @var NormalizerInterface&DenormalizerInterface $instance */
            $instance = new $normalizerClass($this->autoMapper);
            $this->normalizersCache[$normalizer] = $instance;
        }

        return $this->normalizersCache[$normalizer];
    }
}
